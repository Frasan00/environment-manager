{"version":3,"sources":["../src/index.ts","../src/environment_manager.ts","../src/logger.ts"],"sourcesContent":["import EnvironmentManager from './environment_manager';\n\nexport const getInstance = EnvironmentManager.getInstance;\nexport const createEnvSchema = EnvironmentManager.createEnvSchema;\n\nexport default {\n  getInstance,\n  createEnvSchema,\n};\n","import fs from 'fs';\nimport path from 'path';\nimport logger, { log } from './logger';\nimport { envFileNames, EnvParsedFileType, SchemaTypes } from './environment_manager_constants';\nimport { z } from 'zod';\n\nexport default class EnvironmentManager<T extends Record<string, SchemaTypes>> {\n  public schema: z.ZodObject<T>;\n  private rootPath: string;\n  private envs: EnvParsedFileType;\n  private logs: boolean;\n  private throwErrorOnValidationFail: boolean;\n  private envFileHierarchy: envFileNames[];\n\n  private constructor(\n    schemaBuilder: (schema: typeof z) => z.ZodObject<T>,\n    options?: {\n      logs?: boolean;\n      rootPath?: string;\n      throwErrorOnValidationFail?: boolean;\n      envFileHierarchy?: envFileNames[];\n    }\n  ) {\n    this.rootPath = path.resolve(process.cwd(), options?.rootPath || '');\n    this.logs = options?.logs ?? true;\n    this.throwErrorOnValidationFail = options?.throwErrorOnValidationFail ?? true;\n    this.envFileHierarchy = options?.envFileHierarchy || ['.env'];\n    this.envs = this.collectEnvs();\n    this.schema = schemaBuilder(z);\n  }\n\n  /**\n   * @description - Used for schema-less environment variable retrieval\n   */\n  public static getInstance<T extends Record<string, SchemaTypes>>(options?: {\n    logs?: boolean;\n    rootPath?: string;\n    envFileHierarchy?: envFileNames[];\n  }): EnvironmentManager<T> {\n    const envFileHierarchy = options?.envFileHierarchy || ['.env'];\n    const logs = options?.logs ?? true;\n    const throwErrorOnValidationFail = false;\n    const rootPath = path.resolve(process.cwd(), options?.rootPath || '');\n    const envManagerInstance = new EnvironmentManager(() => z.object({}) as any, {\n      logs,\n      rootPath,\n      throwErrorOnValidationFail,\n      envFileHierarchy,\n    });\n    envManagerInstance.envs = envManagerInstance.collectEnvs();\n    return envManagerInstance as EnvironmentManager<T>;\n  }\n\n  /**\n   * @description - This function is used to create the schema for the environment variables\n   * @param cb - A callback function that returns the schema for the environment variables\n   * @param options - An object that contains the options for the environment manager\n   */\n  public static createEnvSchema<T extends Record<string, SchemaTypes>>(\n    schemaBuilder: (schema: typeof z) => z.ZodObject<T>,\n    options?: {\n      logs?: boolean;\n      rootPath?: string;\n      throwErrorOnValidationFail?: boolean;\n      envFileHierarchy?: envFileNames[];\n    }\n  ): EnvironmentManager<T> {\n    const envFileHierarchy = options?.envFileHierarchy || ['.env'];\n    const logs = options?.logs ?? true;\n    const throwErrorOnValidationFail = options?.throwErrorOnValidationFail ?? true;\n    const rootPath = path.resolve(process.cwd(), options?.rootPath || '');\n    const envManagerInstance = new EnvironmentManager(schemaBuilder, {\n      logs,\n      rootPath,\n      throwErrorOnValidationFail,\n      envFileHierarchy,\n    });\n    envManagerInstance.envs = envManagerInstance.collectEnvs();\n    try {\n      envManagerInstance.schema.parse(envManagerInstance.envs);\n    } catch (error: any) {\n      if (envManagerInstance.throwErrorOnValidationFail) {\n        throw error;\n      }\n\n      logger.error(error);\n    }\n\n    return envManagerInstance;\n  }\n\n  /**\n   * @description - This function is used to get a value from the environment variables from the schema\n   */\n  public get<K extends keyof z.infer<z.ZodObject<T>>>(\n    key: K,\n    defaultValue?: any\n  ): z.infer<z.ZodObject<T>>[K];\n  public get(key: string, defaultValue?: any): any;\n  public get<K extends keyof z.infer<z.ZodObject<T>>>(\n    key: K,\n    defaultValue?: any\n  ): z.infer<z.ZodObject<T>>[K] {\n    if (!this.envs) {\n      this.envs = this.collectEnvs();\n    }\n\n    const value = this.envs[key as string];\n    if (value === undefined) {\n      const schemaDefaultValue =\n        this.schema.shape[key as string]?._def.defaultValue?.() ?? undefined;\n      return defaultValue ?? schemaDefaultValue;\n    }\n\n    const retrievedEnv = this.schema.shape[key as string];\n    if (!retrievedEnv) {\n      return value as any;\n    }\n\n    return retrievedEnv.parse(value);\n  }\n\n  /**\n   * @returns - Returns all the environment variables part of the schema\n   */\n  public getAll(): z.infer<z.ZodObject<T>> & { [key: string]: any } {\n    if (!this.envs) {\n      this.envs = this.collectEnvs();\n    }\n    return this.envs as z.infer<z.ZodObject<T>> & { [key: string]: any };\n  }\n\n  protected collectEnvs(): EnvParsedFileType {\n    const envFileHierarchy = this.envFileHierarchy;\n    if (typeof envFileHierarchy === 'string') {\n      const envPath = `${this.rootPath}/${envFileHierarchy}`;\n      if (!fs.existsSync(envPath) && !this.throwErrorOnValidationFail) {\n        log(`Environment file not found: ${envPath}`, this.logs);\n        return {};\n      }\n\n      if (!fs.existsSync(envPath)) {\n        throw new Error(`Environment file not found: ${envPath}`);\n      }\n\n      return this.parseEnvFile(envPath);\n    }\n\n    for (const envFile of envFileHierarchy) {\n      const envPath = `${this.rootPath}/${envFile}`;\n      if (!fs.existsSync(envPath)) {\n        log(`Environment file not found: ${envPath}`, this.logs);\n        log(`Trying next environment file...`, this.logs);\n        continue;\n      }\n\n      return this.parseEnvFile(envPath);\n    }\n\n    if (this.throwErrorOnValidationFail) {\n      throw new Error('Environment file not found');\n    }\n\n    log('No environment file in the hierarchy list found', this.logs);\n    return {};\n  }\n\n  protected parseEnvFile(envPath: string): EnvParsedFileType {\n    const envFile = fs.readFileSync(envPath, 'utf8');\n    const envs = envFile.split('\\n');\n    const envsObject: EnvParsedFileType = {};\n    const regex = /^(\\S+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\[.*\\]|\\{.*\\}|\\S+))/;\n\n    for (const env of envs) {\n      const match = env.match(regex);\n      if (!match) {\n        continue;\n      }\n\n      const key = match[1];\n      let value: string | boolean | any[] = match[2] || match[3] || match[4];\n      if (value && value.trim().startsWith('#')) {\n        continue;\n      }\n\n      // Handle \"\" or ''\n      if (value === undefined) {\n        value = '';\n      }\n\n      // Handle array values\n      if (value.startsWith('[') && value.endsWith(']')) {\n        value = value\n          .slice(1, -1)\n          .split(',')\n          .map((v) => v.trim().replace(/^[\"']|[\"']$/g, ''));\n      }\n\n      // Handle object values\n      if (typeof value === 'string' && value.startsWith('{') && value.endsWith('}')) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          console.error(`Failed to parse JSON in the environment file for key ${key}: ${value}`);\n        }\n      }\n\n      // handle boolean values\n      if (value === 'true' || value === 'false') {\n        value = Boolean(value);\n      }\n\n      envsObject[key] = value;\n    }\n\n    return envsObject;\n  }\n}\n","import winston from 'winston';\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: '\\x1b[32m',\n  warn: '\\x1b[33m',\n  error: '\\x1b[31m',\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || '\\x1b[0m';\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  })\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: 'logfile.log' });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(message: string, logs: boolean) {\n  if (!logs) {\n    return;\n  }\n\n  logger.info(message);\n}\n\nexport function logError(error: Error, message?: string) {\n  logger.error(message ? `${message}: ${error.message}` : '');\n}\n\nexport default logger;\n"],"mappings":"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","names":["src_exports","__export","createEnvSchema","src_default","getInstance","__toCommonJS","import_fs","import_path","import_winston","colors","logFormat","winston","level","message","timestamp","color","consoleTransport","fileTransport","logger","log","logs","logger_default","logger","import_zod","EnvironmentManager","_EnvironmentManager","schemaBuilder","options","__publicField","path","envFileHierarchy","logs","throwErrorOnValidationFail","rootPath","envManagerInstance","error","logger_default","key","defaultValue","value","schemaDefaultValue","retrievedEnv","envPath","fs","log","envFile","envs","envsObject","regex","env","match","v","getInstance","EnvironmentManager","createEnvSchema","src_default"]}