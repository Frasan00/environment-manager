{"version":3,"sources":["../src/index.ts","../src/EnvironmentManager.ts","../src/Logger.ts"],"sourcesContent":["import EnvironmentManager from './EnvironmentManager';\n\n(async () => {\n  const env = await EnvironmentManager.createEnvSchema(\n    (z) => {\n      return z.object({\n        NODE_ENV: z.enum(['development', 'production']),\n        DATABASE_URL: z.string().default('postgres://localhost:5432'),\n        API_KEY: z.string(),\n        DEBUG: z.boolean(),\n        EMPTY_VALUE: z.string(),\n        QUOTED_EMPTY_VALUE: z.string(),\n        SINGLE_QUOTED_EMPTY_VALUE: z.string(),\n        SPACED_KEY: z.string(),\n        SPACED_KEY_WITH_QUOTES: z.string(),\n        SPECIAL_CHARS_IN_VALUE: z.string(),\n        TRAILING_SPACES: z.string(),\n        LIST_OF_VALUES_WITH_QUOTES: z.array(z.string()),\n        LIST_OF_VALUES_WITH_SINGLE_QUOTES: z.array(z.string()),\n        LIST_OF_VALUES_WITHOUT_QUOTES: z.array(z.string()),\n        OBJECT: z.object({ key: z.string() }),\n      });\n    },\n    {\n      logs: false,\n      throwErrorOnValidationFail: false,\n      rootPath: process.cwd(),\n      envFileHierarchy: ['.env'],\n    }\n  );\n\n  console.log(env.getAll());\n})();\n\nexport const getInstance = EnvironmentManager.getInstance;\nexport const createEnvSchema = EnvironmentManager.createEnvSchema;\n","import fs from 'fs';\nimport path from 'path';\nimport logger, { log } from './Logger';\nimport {\n  InferSchemaType,\n  envFileNames,\n  EnvParsedFileType,\n  SchemaTypes,\n} from './EnvironmentManagerConstants';\nimport { z } from 'zod';\n\nexport default class EnvironmentManager<T extends Record<string, SchemaTypes>> {\n  public schema: z.ZodObject<T>;\n  private rootPath: string;\n  private envs: EnvParsedFileType;\n  private logs: boolean;\n  private throwErrorOnValidationFail: boolean;\n  private envFileHierarchy: envFileNames[];\n\n  private constructor(\n    schemaBuilder: (schema: typeof z) => z.ZodObject<T>,\n    options?: {\n      logs?: boolean;\n      rootPath?: string;\n      throwErrorOnValidationFail?: boolean;\n      envFileHierarchy?: envFileNames[];\n    }\n  ) {\n    this.rootPath = path.resolve(process.cwd(), options?.rootPath || '');\n    this.logs = options?.logs ?? true;\n    this.throwErrorOnValidationFail = options?.throwErrorOnValidationFail ?? true;\n    this.envFileHierarchy = options?.envFileHierarchy || ['.env'];\n    this.envs = this.collectEnvs();\n    this.schema = schemaBuilder(z);\n  }\n\n  /**\n   *\n   * @returns - Returns all the environment variables\n   */\n  public getAll(): EnvParsedFileType {\n    if (!this.envs) {\n      this.envs = this.collectEnvs();\n    }\n\n    return this.envs;\n  }\n\n  /**\n   * @description - Used for schema-less environment variable retrieval\n   */\n  public static getInstance<T extends Record<string, SchemaTypes>>(options?: {\n    logs?: boolean;\n    rootPath?: string;\n    envFileHierarchy?: envFileNames[];\n  }): EnvironmentManager<T> {\n    const envFileHierarchy = options?.envFileHierarchy || ['.env'];\n    const logs = options?.logs ?? true;\n    const throwErrorOnValidationFail = false;\n    const rootPath = path.resolve(process.cwd(), options?.rootPath || '');\n    const envManagerInstance = new EnvironmentManager(() => z.object({}) as any, {\n      logs,\n      rootPath,\n      throwErrorOnValidationFail,\n      envFileHierarchy,\n    });\n    envManagerInstance.envs = envManagerInstance.collectEnvs();\n    return envManagerInstance as EnvironmentManager<T>;\n  }\n\n  /**\n   * @description - This function is used to create the schema for the environment variables\n   * @param cb - A callback function that returns the schema for the environment variables\n   * @param options - An object that contains the options for the environment manager\n   */\n  public static async createEnvSchema<T extends Record<string, SchemaTypes>>(\n    schemaBuilder: (schema: typeof z) => z.ZodObject<T>,\n    options?: {\n      logs?: boolean;\n      rootPath?: string;\n      throwErrorOnValidationFail?: boolean;\n      envFileHierarchy?: envFileNames[];\n    }\n  ): Promise<EnvironmentManager<T>> {\n    const envFileHierarchy = options?.envFileHierarchy || ['.env'];\n    const logs = options?.logs ?? true;\n    const throwErrorOnValidationFail = options?.throwErrorOnValidationFail ?? true;\n    const rootPath = path.resolve(process.cwd(), options?.rootPath || '');\n    const envManagerInstance = new EnvironmentManager(schemaBuilder, {\n      logs,\n      rootPath,\n      throwErrorOnValidationFail,\n      envFileHierarchy,\n    });\n    envManagerInstance.envs = envManagerInstance.collectEnvs();\n    try {\n      await envManagerInstance.schema.parseAsync(envManagerInstance.envs);\n    } catch (error: any) {\n      if (envManagerInstance.throwErrorOnValidationFail) {\n        throw error;\n      }\n\n      logger.error(error);\n    }\n\n    return envManagerInstance;\n  }\n\n  /**\n   * @description - This function is used to get a raw value from the environment variables outside the schema\n   * @param key\n   * @param defaultValue\n   * @returns\n   */\n  public getRaw(key: string, defaultValue?: any): string | number | boolean | undefined {\n    if (!this.envs) {\n      this.envs = this.collectEnvs();\n    }\n\n    return this.envs[key] || defaultValue;\n  }\n\n  /**\n   * @description - This function is used to get a value from the environment variables from the schema\n   * @description - In order to retrieve an outside schema value, use the getRaw function\n   * @param key\n   * @param defaultValue\n   * @returns\n   */\n  public get<K extends keyof T>(\n    key: K,\n    defaultValue?: any,\n    schema: z.ZodObject<T> = this.schema\n  ): InferSchemaType<T, K> {\n    if (!this.envs) {\n      this.envs = this.collectEnvs();\n    }\n\n    const value = this.envs[key as string];\n    if (value === undefined) {\n      return defaultValue ?? schema.shape[key as string]._def.defaultValue();\n    }\n\n    const retrievedEnv = schema.shape[key as string];\n    if (!retrievedEnv) {\n      return value as any;\n    }\n\n    return retrievedEnv.parse(value);\n  }\n\n  protected collectEnvs(): EnvParsedFileType {\n    const envFileHierarchy = this.envFileHierarchy;\n    if (typeof envFileHierarchy === 'string') {\n      const envPath = `${this.rootPath}/${envFileHierarchy}`;\n      if (!fs.existsSync(envPath) && !this.throwErrorOnValidationFail) {\n        log(`Environment file not found: ${envPath}`, this.logs);\n        return {};\n      }\n\n      if (!fs.existsSync(envPath)) {\n        throw new Error(`Environment file not found: ${envPath}`);\n      }\n\n      return this.parseEnvFile(envPath);\n    }\n\n    for (const envFile of envFileHierarchy) {\n      const envPath = `${this.rootPath}/${envFile}`;\n      if (!fs.existsSync(envPath)) {\n        log(`Environment file not found: ${envPath}`, this.logs);\n        log(`Trying next environment file...`, this.logs);\n        continue;\n      }\n\n      return this.parseEnvFile(envPath);\n    }\n\n    if (this.throwErrorOnValidationFail) {\n      throw new Error('Environment file not found');\n    }\n\n    log('No environment file in the hierarchy list found', this.logs);\n    return {};\n  }\n\n  protected parseEnvFile(envPath: string): EnvParsedFileType {\n    const envFile = fs.readFileSync(envPath, 'utf8');\n    const envs = envFile.split('\\n');\n    const envsObject: EnvParsedFileType = {};\n    const regex = /^(\\S+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\[.*\\]|\\{.*\\}|\\S+))/;\n\n    for (const env of envs) {\n      if (env.trim().startsWith('#')) {\n        continue;\n      }\n\n      const match = env.match(regex);\n      if (!match) {\n        continue;\n      }\n\n      const key = match[1];\n      let value: string | any[] = match[2] || match[3] || match[4];\n      if (value === undefined) {\n        continue;\n      }\n\n      // Handle array values\n      if (value.startsWith('[') && value.endsWith(']')) {\n        value = value\n          .slice(1, -1)\n          .split(',')\n          .map((v) => v.trim().replace(/^[\"']|[\"']$/g, ''));\n      }\n\n      // Handle object values\n      if (typeof value === 'string' && value.startsWith('{') && value.endsWith('}')) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          console.error(`Failed to parse JSON in the environment file for key ${key}: ${value}`);\n        }\n      }\n\n      envsObject[key] = value;\n    }\n\n    return envsObject;\n  }\n}\n","import winston from 'winston';\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: '\\x1b[32m',\n  warn: '\\x1b[33m',\n  error: '\\x1b[31m',\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || '\\x1b[0m';\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  })\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: 'logfile.log' });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(message: string, logs: boolean) {\n  if (!logs) {\n    return;\n  }\n\n  logger.info(message);\n}\n\nexport function logError(error: Error, message?: string) {\n  logger.error(message ? `${message}: ${error.message}` : '');\n}\n\nexport default logger;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,gBAAe;AACf,kBAAiB;;;ACDjB,qBAAoB;AASpB,IAAM,SAAoB;AAAA,EACxB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AACT;AAEA,IAAM,YAAY,eAAAA,QAAQ,OAAO;AAAA,EAC/B,eAAAA,QAAQ,OAAO,UAAU,EAAE,QAAQ,sBAAsB,CAAC;AAAA,EAC1D,eAAAA,QAAQ,OAAO,OAAO,CAAC,EAAE,OAAO,SAAS,UAAU,MAAM;AACvD,UAAM,QAAQ,OAAO,KAAK,KAAK;AAC/B,WAAO,GAAG,SAAS,IAAI,KAAK,GAAG,KAAK,YAAY,KAAK,GAAG,OAAO;AAAA,EACjE,CAAC;AACH;AAEA,IAAM,mBAAmB,IAAI,eAAAA,QAAQ,WAAW,QAAQ;AACxD,IAAM,gBAAgB,IAAI,eAAAA,QAAQ,WAAW,KAAK,EAAE,UAAU,cAAc,CAAC;AAE7E,IAAM,SAAS,eAAAA,QAAQ,aAAa;AAAA,EAClC,QAAQ;AAAA,EACR,YAAY,CAAC,kBAAkB,aAAa;AAC9C,CAAC;AAEM,SAAS,IAAI,SAAiB,MAAe;AAClD,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,SAAO,KAAK,OAAO;AACrB;AAMA,IAAO,iBAAQ;;;ADlCf,iBAAkB;AAElB,IAAqB,qBAArB,MAAqB,oBAA0D;AAAA,EAQrE,YACN,eACA,SAMA;AAfF,wBAAO;AACP,wBAAQ;AACR,wBAAQ;AACR,wBAAQ;AACR,wBAAQ;AACR,wBAAQ;AAWN,SAAK,WAAW,YAAAC,QAAK,QAAQ,QAAQ,IAAI,GAAG,SAAS,YAAY,EAAE;AACnE,SAAK,OAAO,SAAS,QAAQ;AAC7B,SAAK,6BAA6B,SAAS,8BAA8B;AACzE,SAAK,mBAAmB,SAAS,oBAAoB,CAAC,MAAM;AAC5D,SAAK,OAAO,KAAK,YAAY;AAC7B,SAAK,SAAS,cAAc,YAAC;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,SAA4B;AACjC,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,KAAK,YAAY;AAAA,IAC/B;AAEA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,OAAc,YAAmD,SAIvC;AACxB,UAAM,mBAAmB,SAAS,oBAAoB,CAAC,MAAM;AAC7D,UAAM,OAAO,SAAS,QAAQ;AAC9B,UAAM,6BAA6B;AACnC,UAAM,WAAW,YAAAA,QAAK,QAAQ,QAAQ,IAAI,GAAG,SAAS,YAAY,EAAE;AACpE,UAAM,qBAAqB,IAAI,oBAAmB,MAAM,aAAE,OAAO,CAAC,CAAC,GAAU;AAAA,MAC3E;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,uBAAmB,OAAO,mBAAmB,YAAY;AACzD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAoB,gBAClB,eACA,SAMgC;AAChC,UAAM,mBAAmB,SAAS,oBAAoB,CAAC,MAAM;AAC7D,UAAM,OAAO,SAAS,QAAQ;AAC9B,UAAM,6BAA6B,SAAS,8BAA8B;AAC1E,UAAM,WAAW,YAAAA,QAAK,QAAQ,QAAQ,IAAI,GAAG,SAAS,YAAY,EAAE;AACpE,UAAM,qBAAqB,IAAI,oBAAmB,eAAe;AAAA,MAC/D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,uBAAmB,OAAO,mBAAmB,YAAY;AACzD,QAAI;AACF,YAAM,mBAAmB,OAAO,WAAW,mBAAmB,IAAI;AAAA,IACpE,SAAS,OAAY;AACnB,UAAI,mBAAmB,4BAA4B;AACjD,cAAM;AAAA,MACR;AAEA,qBAAO,MAAM,KAAK;AAAA,IACpB;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,OAAO,KAAa,cAA2D;AACpF,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,KAAK,YAAY;AAAA,IAC/B;AAEA,WAAO,KAAK,KAAK,GAAG,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,IACL,KACA,cACA,SAAyB,KAAK,QACP;AACvB,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO,KAAK,YAAY;AAAA,IAC/B;AAEA,UAAM,QAAQ,KAAK,KAAK,GAAa;AACrC,QAAI,UAAU,QAAW;AACvB,aAAO,gBAAgB,OAAO,MAAM,GAAa,EAAE,KAAK,aAAa;AAAA,IACvE;AAEA,UAAM,eAAe,OAAO,MAAM,GAAa;AAC/C,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA,IACT;AAEA,WAAO,aAAa,MAAM,KAAK;AAAA,EACjC;AAAA,EAEU,cAAiC;AACzC,UAAM,mBAAmB,KAAK;AAC9B,QAAI,OAAO,qBAAqB,UAAU;AACxC,YAAM,UAAU,GAAG,KAAK,QAAQ,IAAI,gBAAgB;AACpD,UAAI,CAAC,UAAAC,QAAG,WAAW,OAAO,KAAK,CAAC,KAAK,4BAA4B;AAC/D,YAAI,+BAA+B,OAAO,IAAI,KAAK,IAAI;AACvD,eAAO,CAAC;AAAA,MACV;AAEA,UAAI,CAAC,UAAAA,QAAG,WAAW,OAAO,GAAG;AAC3B,cAAM,IAAI,MAAM,+BAA+B,OAAO,EAAE;AAAA,MAC1D;AAEA,aAAO,KAAK,aAAa,OAAO;AAAA,IAClC;AAEA,eAAW,WAAW,kBAAkB;AACtC,YAAM,UAAU,GAAG,KAAK,QAAQ,IAAI,OAAO;AAC3C,UAAI,CAAC,UAAAA,QAAG,WAAW,OAAO,GAAG;AAC3B,YAAI,+BAA+B,OAAO,IAAI,KAAK,IAAI;AACvD,YAAI,mCAAmC,KAAK,IAAI;AAChD;AAAA,MACF;AAEA,aAAO,KAAK,aAAa,OAAO;AAAA,IAClC;AAEA,QAAI,KAAK,4BAA4B;AACnC,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAEA,QAAI,mDAAmD,KAAK,IAAI;AAChE,WAAO,CAAC;AAAA,EACV;AAAA,EAEU,aAAa,SAAoC;AACzD,UAAM,UAAU,UAAAA,QAAG,aAAa,SAAS,MAAM;AAC/C,UAAM,OAAO,QAAQ,MAAM,IAAI;AAC/B,UAAM,aAAgC,CAAC;AACvC,UAAM,QAAQ;AAEd,eAAW,OAAO,MAAM;AACtB,UAAI,IAAI,KAAK,EAAE,WAAW,GAAG,GAAG;AAC9B;AAAA,MACF;AAEA,YAAM,QAAQ,IAAI,MAAM,KAAK;AAC7B,UAAI,CAAC,OAAO;AACV;AAAA,MACF;AAEA,YAAM,MAAM,MAAM,CAAC;AACnB,UAAI,QAAwB,MAAM,CAAC,KAAK,MAAM,CAAC,KAAK,MAAM,CAAC;AAC3D,UAAI,UAAU,QAAW;AACvB;AAAA,MACF;AAGA,UAAI,MAAM,WAAW,GAAG,KAAK,MAAM,SAAS,GAAG,GAAG;AAChD,gBAAQ,MACL,MAAM,GAAG,EAAE,EACX,MAAM,GAAG,EACT,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,gBAAgB,EAAE,CAAC;AAAA,MACpD;AAGA,UAAI,OAAO,UAAU,YAAY,MAAM,WAAW,GAAG,KAAK,MAAM,SAAS,GAAG,GAAG;AAC7E,YAAI;AACF,kBAAQ,KAAK,MAAM,KAAK;AAAA,QAC1B,SAAS,GAAG;AACV,kBAAQ,MAAM,wDAAwD,GAAG,KAAK,KAAK,EAAE;AAAA,QACvF;AAAA,MACF;AAEA,iBAAW,GAAG,IAAI;AAAA,IACpB;AAEA,WAAO;AAAA,EACT;AACF;;;CDpOC,YAAY;AACX,QAAM,MAAM,MAAM,mBAAmB;AAAA,IACnC,CAACC,OAAM;AACL,aAAOA,GAAE,OAAO;AAAA,QACd,UAAUA,GAAE,KAAK,CAAC,eAAe,YAAY,CAAC;AAAA,QAC9C,cAAcA,GAAE,OAAO,EAAE,QAAQ,2BAA2B;AAAA,QAC5D,SAASA,GAAE,OAAO;AAAA,QAClB,OAAOA,GAAE,QAAQ;AAAA,QACjB,aAAaA,GAAE,OAAO;AAAA,QACtB,oBAAoBA,GAAE,OAAO;AAAA,QAC7B,2BAA2BA,GAAE,OAAO;AAAA,QACpC,YAAYA,GAAE,OAAO;AAAA,QACrB,wBAAwBA,GAAE,OAAO;AAAA,QACjC,wBAAwBA,GAAE,OAAO;AAAA,QACjC,iBAAiBA,GAAE,OAAO;AAAA,QAC1B,4BAA4BA,GAAE,MAAMA,GAAE,OAAO,CAAC;AAAA,QAC9C,mCAAmCA,GAAE,MAAMA,GAAE,OAAO,CAAC;AAAA,QACrD,+BAA+BA,GAAE,MAAMA,GAAE,OAAO,CAAC;AAAA,QACjD,QAAQA,GAAE,OAAO,EAAE,KAAKA,GAAE,OAAO,EAAE,CAAC;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,4BAA4B;AAAA,MAC5B,UAAU,QAAQ,IAAI;AAAA,MACtB,kBAAkB,CAAC,MAAM;AAAA,IAC3B;AAAA,EACF;AAEA,UAAQ,IAAI,IAAI,OAAO,CAAC;AAC1B,GAAG;AAEI,IAAM,cAAc,mBAAmB;AACvC,IAAM,kBAAkB,mBAAmB;","names":["winston","path","fs","z"]}