{"version":3,"sources":["../src/index.ts","../src/rules/rule.ts","../src/rules/Boolean/BooleanRule.ts","../src/rules/Boolean/BooleanRuleOptions.ts","../src/rules/Enum/EnumRule.ts","../src/rules/Enum/EnumRuleOptions.ts","../src/rules/Number/NumberRule.ts","../src/rules/Number/NumberRuleOptions.ts","../src/rules/String/StringRuleOptions.ts","../src/schema/Schema.ts","../src/EnvironmentManager.ts","../src/Logger.ts"],"sourcesContent":["import EnvironmentManager from './EnvironmentManager';\n\nconst env = new EnvironmentManager();\n\nexport default env;\n","import BooleanRuleOptions from './Boolean/BooleanRuleOptions';\nimport EnumRuleOptions from './Enum/EnumRuleOptions';\nimport NumberRuleOptions from './Number/NumberRuleOptions';\nimport StringRuleOptions from './String/StringRuleOptions';\n\nexport type RuleValueTypes = string | number | boolean;\n\nexport enum RuleValueEnum {\n  string = 'string',\n  number = 'number',\n  boolean = 'boolean',\n  enum = 'enum',\n}\n\nexport default abstract class Rule {\n  public key: string;\n  public valueType: RuleValueEnum;\n  public isOptional: boolean;\n\n  constructor(valueType: RuleValueEnum) {\n    this.key = '';\n    this.valueType = valueType;\n    this.isOptional = false;\n  }\n\n  public validateAndParse(value: RuleValueTypes, rule: Rule): RuleValueTypes | null | undefined {\n    switch (rule.valueType) {\n      case RuleValueEnum.string:\n        return this.validateStringRule(value, rule as StringRuleOptions);\n      case RuleValueEnum.number:\n        return this.validateNumberRule(value, rule as NumberRuleOptions);\n      case RuleValueEnum.boolean:\n        return this.validateBooleanRule(value, rule as BooleanRuleOptions);\n      case RuleValueEnum.enum:\n        return this.validateEnumRule(value, rule as EnumRuleOptions);\n      default:\n        return undefined;\n    }\n  }\n\n  private validateStringRule(\n    value: RuleValueTypes,\n    rule: StringRuleOptions\n  ): string | null | undefined {\n    if (rule.isOptional && !value) {\n      return undefined;\n    }\n\n    if (typeof value !== 'string') {\n      return null;\n    }\n\n    if (rule.minLength && value.length < rule.minLength) {\n      return null;\n    }\n\n    if (rule.maxLength && value.length > rule.maxLength) {\n      return null;\n    }\n\n    if (rule.ip && !/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(value)) {\n      return null;\n    }\n\n    if (rule.url && !/^(http|https):\\/\\/[^\\s]+$/.test(value)) {\n      return null;\n    }\n\n    if (rule.email && !/^[^\\s]+@[^\\s]+$/.test(value)) {\n      return null;\n    }\n\n    if (rule.pattern && !rule.pattern.test(value)) {\n      return null;\n    }\n\n    return value.trim() as string;\n  }\n\n  private validateNumberRule(\n    value: RuleValueTypes,\n    rule: NumberRuleOptions\n  ): number | null | undefined {\n    if (rule.isOptional && !value) {\n      return undefined;\n    }\n\n    if (isNaN(value as number)) {\n      return null;\n    }\n\n    if (rule.minValue && (value as number) < rule.minValue) {\n      return null;\n    }\n\n    if (rule.maxValue && (value as number) > rule.maxValue) {\n      return null;\n    }\n\n    return value as number;\n  }\n\n  private validateEnumRule(\n    value: RuleValueTypes,\n    rule: EnumRuleOptions\n  ): string | null | undefined {\n    if (rule.isOptional && !value) {\n      return undefined;\n    }\n\n    if (typeof value !== 'string') {\n      return null;\n    }\n\n    if (!rule.values.includes(value as string)) {\n      return null;\n    }\n\n    return value as string;\n  }\n\n  private validateBooleanRule(\n    value: RuleValueTypes,\n    rule: BooleanRuleOptions\n  ): boolean | null | undefined {\n    if (rule.isOptional && !value) {\n      return undefined;\n    }\n\n    if (value !== 'true' && value !== 'false') {\n      return null;\n    }\n\n    return Boolean(value);\n  }\n}\n","import Rule, { RuleValueEnum } from '../rule';\n\nexport default class BooleanRule extends Rule {\n  constructor() {\n    super(RuleValueEnum.boolean);\n  }\n}\n","import BooleanRule from './BooleanRule';\n\nexport default class BooleanRuleOptions extends BooleanRule {\n  constructor() {\n    super();\n  }\n\n  public optional(): BooleanRule {\n    this.isOptional = true;\n    return this;\n  }\n}\n","import Rule, { RuleValueEnum } from '../rule';\n\nexport default class EnumRule extends Rule {\n  public values: string[];\n  constructor(values: string[]) {\n    super(RuleValueEnum.enum);\n    this.values = values;\n  }\n}\n","import EnumRule from './EnumRule';\n\nexport default class EnumRuleOptions extends EnumRule {\n  public values: string[];\n  constructor(values: string[]) {\n    super(values);\n    this.values = values;\n  }\n\n  public optional(): EnumRule {\n    this.isOptional = true;\n    return this;\n  }\n}\n","import Rule, { RuleValueEnum } from '../rule';\n\nexport default class NumberRule extends Rule {\n  constructor() {\n    super(RuleValueEnum.number);\n  }\n}\n","import NumberRule from './NumberRule';\n\nexport default class NumberRuleOptions extends NumberRule {\n  public minValue: number;\n  public maxValue: number;\n\n  constructor() {\n    super();\n    this.minValue = Number.MIN_SAFE_INTEGER;\n    this.maxValue = Number.MAX_SAFE_INTEGER;\n  }\n\n  public min(min: number): NumberRuleOptions {\n    this.minValue = min;\n    return this;\n  }\n\n  public max(max: number): NumberRuleOptions {\n    this.maxValue = max;\n    return this;\n  }\n\n  public range(min: number, max: number): NumberRuleOptions {\n    this.minValue = min;\n    this.maxValue = max;\n    return this;\n  }\n\n  public optional(): NumberRule {\n    this.isOptional = true;\n    return this;\n  }\n}\n","import Rule, { RuleValueEnum } from '../rule';\nimport StringRule from './StringRule';\n\nexport type StringOptions = {\n  minLength?: number;\n  maxLength?: number;\n  ip?: boolean;\n  url?: boolean;\n  email?: boolean;\n  pattern?: RegExp;\n};\n\nexport default class StringRuleOptions extends Rule {\n  public minLength?: number;\n  public maxLength?: number;\n  public ip: boolean;\n  public url: boolean;\n  public email: boolean;\n  public pattern?: RegExp;\n\n  constructor() {\n    super(RuleValueEnum.string);\n    this.ip = false;\n    this.url = false;\n    this.email = false;\n  }\n\n  public setMinLength(minLength: number): this {\n    this.minLength = minLength;\n    return this;\n  }\n\n  public setMaxLength(maxLength: number): this {\n    this.maxLength = maxLength;\n    return this;\n  }\n\n  public setIp(): this {\n    this.ip = true;\n    return this;\n  }\n\n  public mustBeUrl(): this {\n    this.url = true;\n    return this;\n  }\n\n  public mustBeEmail(): this {\n    this.email = true;\n    return this;\n  }\n\n  public regex(pattern: RegExp): this {\n    this.pattern = pattern;\n    return this;\n  }\n\n  public optional(): StringRule {\n    this.isOptional = true;\n    return this;\n  }\n}\n","import BooleanRuleOptions from '../rules/Boolean/BooleanRuleOptions';\nimport EnumRuleOptions from '../rules/Enum/EnumRuleOptions';\nimport NumberRuleOptions from '../rules/Number/NumberRuleOptions';\nimport StringRuleOptions from '../rules/String/StringRuleOptions';\n\ntype envFileNames =\n  | '.env'\n  | '.env.local'\n  | '.env.development'\n  | '.env.production'\n  | '.env.test'\n  | '.env.staging'\n  | '.local.env'\n  | '.development.env'\n  | '.production.env'\n  | '.test.env'\n  | '.staging.env'\n  | '.env.local.local'\n  | '.env.local.development'\n  | '.env.local.production'\n  | '.env.local.test'\n  | '.env.local.staging'\n  | '.env.development.local'\n  | '.env.development.development'\n  | '.env.development.production'\n  | '.env.development.test'\n  | '.env.development.staging'\n  | '.env.production.local'\n  | '.env.production.development'\n  | '.env.production.production'\n  | '.env.production.test'\n  | '.env.production.staging'\n  | '.env.test.local'\n  | '.env.test.development'\n  | '.env.test.production'\n  | '.env.test.test'\n  | '.env.test.staging'\n  | '.env.staging.local'\n  | '.env.staging.development'\n  | '.env.staging.production'\n  | '.env.staging.test';\n\nexport default class EnvSchema {\n  public envFileHierarchy: envFileNames[] | envFileNames;\n  public throwErrorOnValidationFail: boolean;\n  public envFilePath?: string;\n  public logs: boolean;\n\n  /**\n   * @description Schema class is used to define the rules for the environment variables\n   * @description rules - object containing the rules for the environment variables\n   * @description envFileHierarchy - array of strings containing the hierarchy of the env files to be loaded\n   * @description throwErrorOnValidationFail - boolean to determine if an error should be thrown when env validation fails\n   */\n  constructor() {\n    this.envFileHierarchy = ['.env'];\n    this.throwErrorOnValidationFail = true;\n    this.logs = true;\n  }\n\n  /**\n   * @description String rule is used to define environment variables that contain strings\n   * @description Used for simple strings that do not require any special validation, note string envs will be trimmed, if you need to preserve whitespace use the literal rule\n   */\n  public string(): StringRuleOptions {\n    return new StringRuleOptions();\n  }\n\n  /**\n   * @description Number rule is used to define environment variables that contain numbers\n   * @description Used for numbers that require min and max validation\n   * @param options - object containing min or max properties\n   */\n  public number(): NumberRuleOptions {\n    return new NumberRuleOptions();\n  }\n\n  /**\n   * @description Enum rule is used to define environment variables that contain a set of predefined values\n   * @description Used for environment variables that must be one of a set of values\n   * @param values - array of strings containing the allowed values\n   */\n  public enum(values: string[]): EnumRuleOptions {\n    return new EnumRuleOptions(values);\n  }\n\n  /**\n   * @description Boolean rule is used to define environment variables that contain boolean values\n   * @description Used for environment variables that must be either true or false\n   */\n  public boolean(): BooleanRuleOptions {\n    return new BooleanRuleOptions();\n  }\n}\n","import Rule, { RuleValueTypes } from './rules/rule';\nimport EnvSchema from './schema/Schema';\nimport fs from 'fs';\nimport path from 'path';\nimport { log } from './Logger';\n\ntype GetEnvDynamicType<T> = T extends 'string'\n  ? string\n  : T extends 'number'\n    ? number\n    : T extends 'boolean'\n      ? boolean\n      : T extends 'enum'\n        ? string\n        : string;\n\nexport default class EnvironmentManager {\n  private rules: Record<string, Rule>;\n  private schema: EnvSchema;\n  private rootPath: string;\n  private envs: Record<string, RuleValueTypes>;\n  private logs: boolean;\n\n  constructor() {\n    this.schema = new EnvSchema();\n    this.rules = {};\n    this.rootPath = '';\n    this.envs = {};\n    this.logs = true;\n  }\n\n  /**\n   * @description - This function is used to create the schema for the environment variables\n   * @param cb - A callback function that returns the schema for the environment variables\n   */\n  public createEnvSchema(cb: (schema: EnvSchema) => Record<string, Rule>) {\n    this.rules = cb(this.schema);\n    for (const key in this.rules) {\n      this.rules[key].key = key;\n    }\n\n    this.logs = this.schema.logs;\n    this.rootPath = this.schema.envFilePath || path.resolve(__dirname);\n    this.envs = this.collectEnvs();\n    this.validateRequiredEnvs();\n  }\n\n  public getEnv<Key extends keyof typeof this.rules>(\n    key: Key,\n    defaultValue?: any\n  ): GetEnvDynamicType<(typeof this.rules)[Key]['valueType']> | undefined {\n    const rule = this.rules[key];\n    const value = this.envs[key];\n    if (!rule) {\n      return value;\n    }\n\n    return (\n      (this.envs[key] as GetEnvDynamicType<(typeof this.rules)[Key]['valueType']>) || defaultValue\n    );\n  }\n\n  protected collectEnvs(): Record<string, RuleValueTypes> {\n    const envFileHierarchy = this.schema.envFileHierarchy;\n    if (typeof envFileHierarchy === 'string') {\n      const envPath = `${this.rootPath}/${envFileHierarchy}`;\n      if (!fs.existsSync(envPath) && !this.schema.throwErrorOnValidationFail) {\n        log(`Environment file not found: ${envPath}`, this.logs);\n        return {};\n      }\n\n      if (!fs.existsSync(envPath)) {\n        throw new Error(`Environment file not found: ${envPath}`);\n      }\n\n      return this.parseEnvFile(envPath);\n    }\n\n    for (const envFile of envFileHierarchy) {\n      const envPath = `${this.rootPath}/${envFile}`;\n      if (!fs.existsSync(envPath)) {\n        log(`Environment file not found: ${envPath}`, this.logs);\n        log(`Trying next environment file...`, this.logs);\n        continue;\n      }\n\n      return this.parseEnvFile(envPath);\n    }\n\n    if (this.schema.throwErrorOnValidationFail) {\n      throw new Error('Environment file not found');\n    }\n\n    log('No environment file in the hierarchy list found', this.logs);\n    return {};\n  }\n\n  protected parseEnvFile(envPath: string): Record<string, RuleValueTypes> {\n    const envFile = fs.readFileSync(envPath, 'utf8');\n    const envs = envFile.split('\\n');\n    const envsObject: Record<string, RuleValueTypes> = {};\n\n    const regex = /^(\\S+)=\\s*(?:\"([^\"#]*)\"|([^#]*))/;\n\n    for (const env of envs) {\n      if (env.trim().startsWith('#')) {\n        continue;\n      }\n\n      const match = env.match(regex);\n      if (match) {\n        const key = match[1];\n        let value = match[2] || match[3];\n\n        if (!match[2]) {\n          value = value.trim();\n        }\n\n        if (value === '') {\n          continue;\n        }\n\n        envsObject[key] = value;\n\n        const validatedValue = this.validateEnv(key, envsObject[key]);\n        if (validatedValue === undefined) {\n          continue;\n        }\n\n        envsObject[key] = validatedValue;\n      }\n    }\n\n    return envsObject as Record<string, RuleValueTypes>;\n  }\n\n  protected validateRequiredEnvs() {\n    for (const key in this.rules) {\n      const rule = this.rules[key];\n      if (!rule.isOptional && !this.envs[key]) {\n        if (this.schema.throwErrorOnValidationFail) {\n          throw new Error(`Required environment variable not found: ${key}`);\n        }\n\n        log(`Required environment variable not found: ${key}`, this.logs);\n      }\n    }\n  }\n\n  protected validateEnv(envKey: string, envValue: RuleValueTypes): RuleValueTypes | undefined {\n    const rule = this.rules[envKey];\n    if (!rule) {\n      return undefined;\n    }\n\n    const parsedValue = rule.validateAndParse(envValue, rule);\n    if (parsedValue === undefined) {\n      return undefined;\n    }\n\n    if (parsedValue === null) {\n      if (this.schema.throwErrorOnValidationFail) {\n        throw new Error(\n          `\\nSchema Validation failed for environment variable ${envKey}\\n: ${JSON.stringify(rule, null, 2)}`\n        );\n      }\n\n      log(\n        `Schema Validation failed for environment variable ${envKey}\\n: ${JSON.stringify(rule, null, 2)}`,\n        this.logs\n      );\n      return undefined;\n    }\n\n    return parsedValue;\n  }\n}\n","import winston from 'winston';\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: '\\x1b[32m',\n  warn: '\\x1b[33m',\n  error: '\\x1b[31m',\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || '\\x1b[0m';\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  })\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: 'logfile.log' });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(message: string, logs: boolean) {\n  if (!logs) {\n    return;\n  }\n\n  logger.info(message);\n}\n\nexport function logError(error: Error, message?: string) {\n  logger.error(message ? `${message}: ${error.message}` : '');\n}\n\nexport default logger;\n"],"mappings":"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","names":["winston","path","fs","env"]}