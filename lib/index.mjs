var E=Object.defineProperty;var b=(o,t,e)=>t in o?E(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var c=(o,t,e)=>(b(o,typeof t!="symbol"?t+"":t,e),e);import m from"fs";import d from"path";import h from"winston";var T={info:"\x1B[32m",warn:"\x1B[33m",error:"\x1B[31m"},w=h.format.combine(h.format.timestamp({format:"YYYY-MM-DD HH:mm:ss"}),h.format.printf(({level:o,message:t,timestamp:e})=>{let n=T[o]||"\x1B[0m";return`${e} ${n}${o}\x1B[0m: ${n}${t}\x1B[0m`})),x=new h.transports.Console,O=new h.transports.File({filename:"logfile.log"}),u=h.createLogger({format:w,transports:[x,O]});function g(o,t){t&&u.info(o)}var y=u;import{z as F}from"zod";var f=class o{constructor(t,e){c(this,"schema");c(this,"rootPath");c(this,"envs");c(this,"logs");c(this,"throwErrorOnValidationFail");c(this,"envFileHierarchy");this.rootPath=d.resolve(process.cwd(),e?.rootPath||""),this.logs=e?.logs??!0,this.throwErrorOnValidationFail=e?.throwErrorOnValidationFail??!0,this.envFileHierarchy=e?.envFileHierarchy||[".env"],this.envs=this.collectEnvs(),this.schema=t(F)}static getInstance(t){let e=t?.envFileHierarchy||[".env"],n=t?.logs??!0,s=!1,a=d.resolve(process.cwd(),t?.rootPath||""),l=new o(()=>F.object({}),{logs:n,rootPath:a,throwErrorOnValidationFail:s,envFileHierarchy:e});return l.envs=l.collectEnvs(),l}static createEnvSchema(t,e){let n=e?.envFileHierarchy||[".env"],s=e?.logs??!0,a=e?.throwErrorOnValidationFail??!0,l=d.resolve(process.cwd(),e?.rootPath||""),i=new o(t,{logs:s,rootPath:l,throwErrorOnValidationFail:a,envFileHierarchy:n});i.envs=i.collectEnvs();try{i.schema.parse(i.envs)}catch(v){if(i.throwErrorOnValidationFail)throw v;y.error(v)}return i}get(t,e){this.envs||(this.envs=this.collectEnvs());let n=this.envs[t];if(n===void 0){let a=this.schema.shape[t]?._def.defaultValue?.()??void 0;return e??a}let s=this.schema.shape[t];return s?s.parse(n):n}getAll(){return this.envs||(this.envs=this.collectEnvs()),this.envs}collectEnvs(){let t=this.envFileHierarchy;if(typeof t=="string"){let e=`${this.rootPath}/${t}`;if(!m.existsSync(e)&&!this.throwErrorOnValidationFail)return g(`Environment file not found: ${e}`,this.logs),{};if(!m.existsSync(e))throw new Error(`Environment file not found: ${e}`);return this.parseEnvFile(e)}for(let e of t){let n=`${this.rootPath}/${e}`;if(!m.existsSync(n)){g(`Environment file not found: ${n}`,this.logs),g("Trying next environment file...",this.logs);continue}return this.parseEnvFile(n)}if(this.throwErrorOnValidationFail)throw new Error("Environment file not found");return g("No environment file in the hierarchy list found",this.logs),{}}parseEnvFile(t){let n=m.readFileSync(t,"utf8").split(`
`),s={},a=/^(\S+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\[.*\]|\{.*\}|\S+))/;for(let l of n){let i=l.match(a);if(!i)continue;let v=i[1],r=i[2]||i[3]||i[4];if(!(r&&r.trim().startsWith("#"))){if(r===void 0&&(r=""),r.startsWith("[")&&r.endsWith("]")&&(r=r.slice(1,-1).split(",").map(p=>p.trim().replace(/^["']|["']$/g,""))),typeof r=="string"&&r.startsWith("{")&&r.endsWith("}"))try{r=JSON.parse(r)}catch{console.error(`Failed to parse JSON in the environment file for key ${v}: ${r}`)}(r==="true"||r==="false")&&(r=!!r),s[v]=r}}return s}};var P=f.getInstance,z=f.createEnvSchema,I={getInstance:P,createEnvSchema:z};export{z as createEnvSchema,I as default,P as getInstance};
//# sourceMappingURL=index.mjs.map